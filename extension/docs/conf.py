# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))

import subprocess, os
import sys
import re

from datetime import datetime
sys.path.insert(0, os.path.abspath('..'))
def configureDoxyfile(input_dir, output_dir):
	with open('Doxyfile.in', 'r') as file :
		filedata = file.read()

	filedata = filedata.replace('@DOXYGEN_INPUT_DIR@', input_dir)
	filedata = filedata.replace('@DOXYGEN_OUTPUT_DIR@', output_dir)
	
	with open('Doxyfile', 'w') as file:
		file.write(filedata)

# Check if we're running on Read the Docs' servers
read_the_docs_build = os.environ.get('READTHEDOCS', None) == 'True'

breathe_projects = {}
if read_the_docs_build:
        input_dir = '../'
        output_dir = 'build'
        configureDoxyfile(input_dir, output_dir)
        subprocess.call('doxygen', shell=True)
        breathe_projects['Docs'] = output_dir + '/xml'

#breathe_projects['Docs'] = './doxygen/xml'
# -- Project information -----------------------------------------------------

project = 'backbone'

time = datetime.now().strftime('%Y-%m-%d %H:%M')
copyright = f'{time}, backbone'
author = 'backbone'

# The full version, including alpha/beta/rc tags
def get_version():
    with open('../conanfile.py', 'r') as f:
        return re.search(r'\s+version\s*=\s*"(.*)"',
                         f.read().strip()).groups()[0]


release = get_version()
# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
#...

extensions = [ 'sphinx.ext.napoleon', 'sphinx.ext.viewcode', 'recommonmark',
    'sphinx_markdown_tables', 'breathe', 'exhale', 'sphinx.ext.graphviz' ]

#...

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']


# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
source_suffix = ['.rst', '.md']

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
#exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']
exclude_patterns = [
'_build', 'Thumbs.db', '.DS_Store', 'api/*.h.rst', 'api/*.cpp.rst',
'api/*.hpp.rst'
]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_book_theme'

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = []
# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False
master_doc = 'index'
graphviz_output_format = 'svg'
suppress_warnings = ['toc.excluded', 'toc.not_readable']

# Breathe Configuration
breathe_default_project = "Docs"
def specificationsForKind(kind):
    '''
    For a given input ``kind``, return the list of reStructuredText specifications
    for the associated Breathe directive.
    '''
    # Change the defaults for .. doxygenclass:: and .. doxygenstruct::
    if kind == "class" or kind == "struct":
        return [
            ":members:", ":protected-members:", ":private-members:",
            ":undoc-members:", ":allow-dot-graphs:"
        ]
    # Change the defaults for .. doxygenenum::
    elif kind == "enum":
        return [":no-link:"]
    # An empty list signals to Exhale to use the defaults
    else:
        return []


from exhale import utils

exhale_args = {
    "containmentFolder":
    "./api",
    # other required entries here
    "rootFileName":
    "library_root.rst",
    "rootFileTitle":
    "C++ Documentation",
    "kindsWithContentsDirectives": ["file", "namespace", "dir"],
    "unabridgedOrphanKinds": {"file"},
    "createTreeView":
    True,
    "doxygenStripFromPath":
    ".",
    "customSpecificationsMapping":
    utils.makeCustomSpecificationsMapping(specificationsForKind)
}
