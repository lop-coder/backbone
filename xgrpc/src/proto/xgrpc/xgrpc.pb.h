// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: xgrpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_xgrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_xgrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/message.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/port_undef.inc>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_xgrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_xgrpc_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_xgrpc_2eproto;
namespace backbonerpc {
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace backbonerpc
PROTOBUF_NAMESPACE_OPEN
template <>
::backbonerpc::Request* Arena::CreateMaybeMessage<::backbonerpc::Request>(
    Arena*);
template <>
::backbonerpc::Response* Arena::CreateMaybeMessage<::backbonerpc::Response>(
    Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace backbonerpc {

// ===================================================================

class Request final
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:backbonerpc.Request) */
{
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit PROTOBUF_CONSTEXPR Request(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept : Request() { *this = ::std::move(from); }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from)
      return *this;
    if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(&_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;

  friend void swap(Request& a, Request& b) { a.Swap(&b); }
  inline void Swap(Request* other) {
    if (other == this)
      return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from) { Request::MergeImpl(*this, from); }

 private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                        const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

 public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

 private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

 private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backbonerpc.Request";
  }

 protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                   bool is_message_owned = false);

 public:
  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);

 private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();

 public:
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);

 private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

 public:
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);

 private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

 public:
  // @@protoc_insertion_point(class_scope:backbonerpc.Request)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union {
    Impl_ _impl_;
  };
  friend struct ::TableStruct_xgrpc_2eproto;
};
// -------------------------------------------------------------------

class Response final
    : public ::PROTOBUF_NAMESPACE_ID::
          Message /* @@protoc_insertion_point(class_definition:backbonerpc.Response) */
{
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept : Response() { *this = ::std::move(from); }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from)
      return *this;
    if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(&_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;

  friend void swap(Response& a, Response& b) { a.Swap(&b); }
  inline void Swap(Response* other) {
    if (other == this)
      return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this)
      return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Response& from) { Response::MergeImpl(*this, from); }

 private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg,
                        const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);

 public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(
      const char* ptr,
      ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target,
      ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

 private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

 private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "backbonerpc.Response";
  }

 protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                    bool is_message_owned = false);

 public:
  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);

 private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();

 public:
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);

 private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

 public:
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);

 private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

 public:
  // @@protoc_insertion_point(class_scope:backbonerpc.Response)
 private:
  class _Internal;

  template <typename T>
  friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union {
    Impl_ _impl_;
  };
  friend struct ::TableStruct_xgrpc_2eproto;
};
// ===================================================================

// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Request

// string id = 1;
inline void Request::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Request::id() const {
  // @@protoc_insertion_point(field_get:backbonerpc.Request.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void Request::set_id(ArgT0&& arg0, ArgT... args) {

  _impl_.id_.Set(static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backbonerpc.Request.id)
}
inline std::string* Request::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:backbonerpc.Request.id)
  return _s;
}
inline const std::string& Request::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Request::_internal_set_id(const std::string& value) {

  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_id() {

  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_id() {
  // @@protoc_insertion_point(field_release:backbonerpc.Request.id)
  return _impl_.id_.Release();
}
inline void Request::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backbonerpc.Request.id)
}

// string type = 2;
inline void Request::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Request::type() const {
  // @@protoc_insertion_point(field_get:backbonerpc.Request.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void Request::set_type(ArgT0&& arg0,
                                                     ArgT... args) {

  _impl_.type_.Set(static_cast<ArgT0&&>(arg0), args...,
                   GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backbonerpc.Request.type)
}
inline std::string* Request::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:backbonerpc.Request.type)
  return _s;
}
inline const std::string& Request::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Request::_internal_set_type(const std::string& value) {

  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_type() {

  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_type() {
  // @@protoc_insertion_point(field_release:backbonerpc.Request.type)
  return _impl_.type_.Release();
}
inline void Request::set_allocated_type(std::string* type) {
  if (type != nullptr) {

  } else {
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backbonerpc.Request.type)
}

// bytes data = 3;
inline void Request::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Request::data() const {
  // @@protoc_insertion_point(field_get:backbonerpc.Request.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void Request::set_data(ArgT0&& arg0,
                                                     ArgT... args) {

  _impl_.data_.SetBytes(static_cast<ArgT0&&>(arg0), args...,
                        GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backbonerpc.Request.data)
}
inline std::string* Request::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:backbonerpc.Request.data)
  return _s;
}
inline const std::string& Request::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Request::_internal_set_data(const std::string& value) {

  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_data() {

  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Request::release_data() {
  // @@protoc_insertion_point(field_release:backbonerpc.Request.data)
  return _impl_.data_.Release();
}
inline void Request::set_allocated_data(std::string* data) {
  if (data != nullptr) {

  } else {
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backbonerpc.Request.data)
}

// -------------------------------------------------------------------

// Response

// string id = 1;
inline void Response::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Response::id() const {
  // @@protoc_insertion_point(field_get:backbonerpc.Response.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void Response::set_id(ArgT0&& arg0,
                                                    ArgT... args) {

  _impl_.id_.Set(static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backbonerpc.Response.id)
}
inline std::string* Response::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:backbonerpc.Response.id)
  return _s;
}
inline const std::string& Response::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Response::_internal_set_id(const std::string& value) {

  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_id() {

  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_id() {
  // @@protoc_insertion_point(field_release:backbonerpc.Response.id)
  return _impl_.id_.Release();
}
inline void Response::set_allocated_id(std::string* id) {
  if (id != nullptr) {

  } else {
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backbonerpc.Response.id)
}

// string type = 2;
inline void Response::clear_type() {
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Response::type() const {
  // @@protoc_insertion_point(field_get:backbonerpc.Response.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void Response::set_type(ArgT0&& arg0,
                                                      ArgT... args) {

  _impl_.type_.Set(static_cast<ArgT0&&>(arg0), args...,
                   GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backbonerpc.Response.type)
}
inline std::string* Response::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:backbonerpc.Response.type)
  return _s;
}
inline const std::string& Response::_internal_type() const {
  return _impl_.type_.Get();
}
inline void Response::_internal_set_type(const std::string& value) {

  _impl_.type_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_type() {

  return _impl_.type_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_type() {
  // @@protoc_insertion_point(field_release:backbonerpc.Response.type)
  return _impl_.type_.Release();
}
inline void Response::set_allocated_type(std::string* type) {
  if (type != nullptr) {

  } else {
  }
  _impl_.type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArenaForAllocation());
  }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backbonerpc.Response.type)
}

// bytes data = 3;
inline void Response::clear_data() {
  _impl_.data_.ClearToEmpty();
}
inline const std::string& Response::data() const {
  // @@protoc_insertion_point(field_get:backbonerpc.Response.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE void Response::set_data(ArgT0&& arg0,
                                                      ArgT... args) {

  _impl_.data_.SetBytes(static_cast<ArgT0&&>(arg0), args...,
                        GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:backbonerpc.Response.data)
}
inline std::string* Response::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:backbonerpc.Response.data)
  return _s;
}
inline const std::string& Response::_internal_data() const {
  return _impl_.data_.Get();
}
inline void Response::_internal_set_data(const std::string& value) {

  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* Response::_internal_mutable_data() {

  return _impl_.data_.Mutable(GetArenaForAllocation());
}
inline std::string* Response::release_data() {
  // @@protoc_insertion_point(field_release:backbonerpc.Response.data)
  return _impl_.data_.Release();
}
inline void Response::set_allocated_data(std::string* data) {
  if (data != nullptr) {

  } else {
  }
  _impl_.data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.data_.IsDefault()) {
    _impl_.data_.Set("", GetArenaForAllocation());
  }
#endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:backbonerpc.Response.data)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// @@protoc_insertion_point(namespace_scope)

}  // namespace backbonerpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_xgrpc_2eproto
